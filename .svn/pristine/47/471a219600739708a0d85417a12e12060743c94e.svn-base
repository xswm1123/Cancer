//
//  WorkReportDetailViewController.m
//  Cancer
//
//  Created by zpj on 14/10/31.
//  Copyright (c) 2014年 parsec. All rights reserved.
//

#import "WorkReportDetailViewController.h"

@interface WorkReportDetailViewController ()

@end

@implementation WorkReportDetailViewController

@synthesize reportTitle;
@synthesize content;
@synthesize recScroll;
@synthesize sendTime;
@synthesize ccScroll;
@synthesize dict;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.hideRightBut = YES;
    
    [self performSelectorInBackground:@selector(readReport) withObject:nil];
    
}

-(void)viewDidAppear:(BOOL)animated
{
    
    
    reportTitle.text = [dict objectForKey:@"title"];
    content.text = [dict objectForKey:@"content"];
    sendTime.text = [dict objectForKey:@"showCreateDate"];
    
    NSArray *mainReceivers = [dict objectForKey:@"mainReceivers"];
    NSArray *attachedReceivers = [dict objectForKey:@"attachedReceivers"];
    float fontSize = 12.0f;
    if(isPad){
        fontSize = 16.0f;
    }



    if (mainReceivers != nil) {
        float offset = 0;
        for (int i = 0; i < mainReceivers.count; i++) {
            NSDictionary *tmp = [mainReceivers objectAtIndex:i];
            UILabel *lab = [[UILabel alloc]init];
            lab.font = [UtilTool currentSystemFont:fontSize];

            
            NSString *name = nil;
            
            if (i != mainReceivers.count - 1) {
                name = [NSString stringWithFormat:@" %@,", [tmp objectForKey:@"name"]];
            }else{
                name = [NSString stringWithFormat:@" %@", [tmp objectForKey:@"name"]];
            }

            NSDictionary *attribute = @{NSFontAttributeName: [UtilTool currentSystemFont:fontSize]};

            CGSize maxSize =CGSizeMake(320.f, recScroll.frame.size.height);
            CGSize size = [name boundingRectWithSize:maxSize options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;

            
            lab.frame = CGRectMake(offset, 0, size.width, recScroll.frame.size.height);
            lab.text = name;
            lab.textColor = [UIColor blackColor];
            lab.textAlignment = NSTextAlignmentLeft;
            offset = offset + size.width;
            [recScroll addSubview:lab];
        }
        
        recScroll.contentSize = CGSizeMake(offset, recScroll.frame.size.height);
    }
    
    if (attachedReceivers != nil) {
        float offset = 0;
        for (int i = 0; i < attachedReceivers.count; i++) {
            
            NSDictionary *tmp = [attachedReceivers objectAtIndex:i];
            UILabel *lab = [[UILabel alloc]init];
            lab.font = [UtilTool currentSystemFont:fontSize];
            
            NSString *name = nil;
            
            if (i != attachedReceivers.count - 1) {
                name = [NSString stringWithFormat:@" %@,", [tmp objectForKey:@"name"]];
            }else{
                name = [NSString stringWithFormat:@" %@", [tmp objectForKey:@"name"]];
            }
//            CGSize size = [name sizeWithFont:lab.font constrainedToSize:CGSizeMake(MAXFLOAT, ccScroll.frame.size.height)];
            
            NSDictionary *attribute = @{NSFontAttributeName: [UtilTool currentSystemFont:fontSize]};
            CGSize maxSize =CGSizeMake(320.0f, recScroll.frame.size.height);
            CGSize size = [name boundingRectWithSize:maxSize options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;



            
            
            
            lab.frame = CGRectMake(offset, 0, size.width, ccScroll.frame.size.height);
            lab.text = name;
            lab.textColor = [UIColor blackColor];
            lab.textAlignment = NSTextAlignmentLeft;
            offset = offset + size.width;
            [ccScroll addSubview:lab];
        }
    }
}



- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

//-------------------------------------------

//导航栏左边按钮
-(void)clickBack:(UITapGestureRecognizer *)gesture
{
    [self.navigationController popViewControllerAnimated:YES];
}

//导航栏右边按钮
-(void)share:(UITapGestureRecognizer *)gesture
{
    
}

//-------------------------------------------

-(void)readReport
{
    NSDictionary *userDic = [UtilTool getUserDic];
    NSString *token = [userDic objectForKey:@"token"];
    NSDictionary *user = [[userDic objectForKey:@"user"] objectAtIndex:0];
    NSString *url=[[NSString alloc]initWithFormat:@"%@manager/jobReport/readJobReport",[UtilTool getHostURL]];
    
    NSMutableString *param = [[NSMutableString alloc]init];
    [param appendFormat:@"json={"];
    [param appendFormat:@"\"token\":\"%@\" ,", token];
    [param appendFormat:@"\"userId\":%i ,", [[user objectForKey:@"id"] intValue] ];
    [param appendFormat:@"\"jobId\":%i ", [[dict objectForKey:@"id"] intValue] ];
    [param appendFormat:@"}"];
    
    
    NSNumber *num = nil;
    [UtilTool sendUrlRequestByCache:url paramValue:param method:HTTPRequestMethodPost isReload:YES status:&num];
    
}

@end
